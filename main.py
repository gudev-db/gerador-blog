import streamlit as st
from google import genai
import os
import uuid
from datetime import datetime
from pymongo import MongoClient

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Gerador de Blog Posts Agr√≠colas", page_icon="üå±", layout="wide")

# T√≠tulo do aplicativo
st.title("üå± Gerador de Blog Posts Agr√≠colas")
st.markdown("Crie conte√∫dos especializados para o agroneg√≥cio seguindo a estrutura profissional")

# Configura√ß√£o do Gemini API
gemini_api_key = st.secrets.get("GEMINI_API_KEY", os.getenv("GEMINI_API_KEY"))
if not gemini_api_key:
    gemini_api_key = st.text_input("Digite sua API Key do Gemini:", type="password")

if gemini_api_key:
    client = genai.Client(api_key=gemini_api_key)
    
    # Conex√£o com MongoDB (opcional)
    try:
        mongodb_uri = st.secrets.get("MONGODB_URI", os.getenv("MONGODB_URI"))
        if mongodb_uri:
            client_mongo = MongoClient(mongodb_uri)
            db = client_mongo['blog_posts_agricolas']
            collection = db['posts_gerados']
            mongo_connected = True
        else:
            mongo_connected = False
    except:
        mongo_connected = False
        st.warning("Conex√£o com MongoDB n√£o configurada. Os posts n√£o ser√£o salvos.")

    # Fun√ß√£o para salvar no MongoDB
    def salvar_no_mongo(titulo, cultura, editoria, mes_publicacao, objetivo_post, url, texto_gerado):
        if mongo_connected:
            documento = {
                "id": str(uuid.uuid4()),
                "titulo": titulo,
                "cultura": cultura,
                "editoria": editoria,
                "mes_publicacao": mes_publicacao,
                "objetivo_post": objetivo_post,
                "url": url,
                "texto_gerado": texto_gerado,
                "data_criacao": datetime.now()
            }
            collection.insert_one(documento)
            return True
        return False

    # Regras extra√≠das do documento exemplo
    regras_replicacao = '''
**REGRAS DE REPLICA√á√ÉO EXTRA√çDAS DO DOCUMENTO EXEMPLO:**

**1. ESTRUTURA DO DOCUMENTO:**
- T√≠tulo principal em formato de chamada para a√ß√£o
- Subt√≠tulo/Chap√©u com resumo executivo (1-2 linhas)
- Introdu√ß√£o: Contextualiza o problema atual e seu impacto
- Se√ß√£o de Problema: Detalha pragas espec√≠ficas, comportamentos e danos causados
- Se√ß√£o de Solu√ß√£o Gen√©rica: Explica a estrat√©gia geral (ex: tratamento de sementes)
- Se√ß√£o de Solu√ß√£o Espec√≠fica: Apresenta o produto como resposta aos desafios
- Conclus√£o: Refor√ßa compromisso da marca e chama para a√ß√£o

**2. LINGUAGEM E TOM:**
- Linguagem t√©cnica e profissional, mas acess√≠vel ao produtor rural
- Tom autoritativo e especializado
- Uso de terminologia do agroneg√≥cio ("estabelecimento do estande", "manejo integrado")
- Persuas√£o focada em benef√≠cios e solu√ß√£o de problemas
- Mix de frases curtas de impacto com par√°grafos explicativos

**3. ELEMENTOS T√âCNICOS OBRIGAT√ìRIOS:**
- Nomes cient√≠ficos das pragas entre par√™nteses
- Cita√ß√£o de fontes (ex: "Fonte: Embrapa")
- Destaque em negrito para nome do produto e termos t√©cnicos-chave
- Descri√ß√£o detalhada de danos espec√≠ficos
- Explica√ß√£o de benef√≠cios econ√¥micos e estrat√©gicos

**4. FORMATA√á√ÉO:**
- T√≠tulo principal
- Subt√≠tulo em formato de resumo
- Par√°grafos bem estruturados com transi√ß√µes suaves
- Se√ß√µes claramente demarcadas (sem subt√≠tulos numerados)
- Destaques em negrito para produtos e termos importantes

**5. PERSUAS√ÉO E ARGUMENTA√á√ÉO:**
- Sempre vincular problema ‚Üí solu√ß√£o
- Destacar valor econ√¥mico e retorno sobre investimento
- Usar dados concretos sobre danos e perdas
- Apresentar produto como consequ√™ncia l√≥gica da argumenta√ß√£o
- Focar em prote√ß√£o e potencial m√°ximo da lavoura
'''

    # Template do prompt baseado nas regras
    prompt_template = '''
**INSTRU√á√ïES PARA CRIA√á√ÉO DE BLOG POST AGR√çCOLA:**

Voc√™ √© um redator t√©cnico especializado em agroneg√≥cio. Crie um artigo de blog seguindo ESTRITAMENTE as regras abaixo:

{regras_replicacao}

**DADOS PARA INCLUS√ÉO NO POST:**

**Informa√ß√µes B√°sicas:**
- T√≠tulo: {titulo_blog}
- Cultura: {cultura}
- Editoria: {editoria}
- Objetivo: {objetivo_post}

**Contexto e Problema:**
- Problema Principal: {problema_principal}
- Pragas/Alvo: {pragas_alvo}
- Danos Causados: {danos_causados}

**Solu√ß√µes:**
- Solu√ß√£o Gen√©rica: {solucao_generica}
- Produto Espec√≠fico: {nome_produto}
- Princ√≠pio Ativo: {principio_ativo}
- Benef√≠cios: {beneficios_produto}
- Espectro de A√ß√£o: {espectro_acao}

**Marca:**
- Empresa: {nome_empresa}
- Central de Conte√∫dos: {nome_central}

**TAREFA:**
Gere um artigo completo e pronto para publica√ß√£o, seguindo TODAS as regras de estrutura, linguagem, formata√ß√£o e persuas√£o listadas acima. O texto deve ser t√©cnico, persuasivo e fiel ao estilo do documento exemplo.
'''

    # Interface do usu√°rio
    with st.sidebar:
        st.header("üìã Configura√ß√µes do Post")
        
        titulo_blog = st.text_input("T√≠tulo do Blog:", "Proteja sua soja de nematoides e pragas de solo")
        cultura = st.text_input("Cultura:", "Soja")
        editoria = st.text_input("Editoria:", "Manejo e Prote√ß√£o")
        mes_publicacao = st.text_input("M√™s de Publica√ß√£o:", "08/2025")
        objetivo_post = st.text_area("Objetivo do Post:", "Explicar a import√¢ncia do manejo de nematoides e apresentar solu√ß√µes via tratamento de sementes")
        url = st.text_input("URL:", "/manejo-e-protecao/proteja-sua-soja-de-nematoides")
        
        st.divider()
        
        problema_principal = st.text_area("Problema Principal/Contexto:", "Solos compactados e com palhada de milho t√™m favorecido a explos√£o populacional de nematoides, preocupando produtores para a pr√≥xima safra")
        pragas_alvo = st.text_area("Pragas/Alvo Principal:", "Nematoide das galhas (Meloidogyne incognita), Nematoide de cisto (Heterodera glycines)")
        danos_causados = st.text_area("Danos Causados:", "Forma√ß√£o de galhas nas ra√≠zes que impedem a absor√ß√£o de √°gua e nutrientes, paralisando o desenvolvimento da planta e causando amarelecimento")
        solucao_generica = st.text_area("Solu√ß√£o Gen√©rica:", "Ado√ß√£o de um manejo integrado com gen√©tica resistente, rota√ß√£o de culturas e tratamento de sementes espec√≠fico")
        
        st.divider()
        
        nome_produto = st.text_input("Nome do Produto:", "NEMATEC¬Æ")
        principio_ativo = st.text_input("Princ√≠pio Ativo/Diferencial:", "Abamectina, com tripla a√ß√£o de contato, sist√™mica e promotora de crescimento radicular")
        beneficios_produto = st.text_area("Benef√≠cios do Produto:", "Prote√ß√£o prolongada no sulco de plantio, controle dos est√°gios juvenis dos nematoides, est√≠mulo ao desenvolvimento de ra√≠zes laterais")
        espectro_acao = st.text_area("Espectro de A√ß√£o:", "Meloidogyne incognita, Heterodera glycines, Pratylenchulus brachyurus")
        nome_empresa = st.text_input("Nome da Empresa/Marca:", "Syngenta")
        nome_central = st.text_input("Nome da Central de Conte√∫dos:", "Portal Agro")
        
        st.divider()
        
        # Op√ß√£o para visualizar regras
        if st.checkbox("üìã Visualizar Regras de Replica√ß√£o"):
            st.info(regras_replicacao)
        
        gerar_post = st.button("üîÑ Gerar Blog Post", type="primary", use_container_width=True)

    # √Årea principal
    if gerar_post and gemini_api_key:
        with st.spinner("Gerando seu blog post... Isso pode levar alguns segundos"):
            try:
                # Construir o prompt final
                prompt_final = prompt_template.format(
                    regras_replicacao=regras_replicacao,
                    titulo_blog=titulo_blog,
                    cultura=cultura,
                    editoria=editoria,
                    objetivo_post=objetivo_post,
                    problema_principal=problema_principal,
                    pragas_alvo=pragas_alvo,
                    danos_causados=danos_causados,
                    solucao_generica=solucao_generica,
                    nome_produto=nome_produto,
                    principio_ativo=principio_ativo,
                    beneficios_produto=beneficios_produto,
                    espectro_acao=espectro_acao,
                    nome_empresa=nome_empresa,
                    nome_central=nome_central
                )
                
                # Gerar conte√∫do com Gemini
                response = client.models.generate_content(
                    model="gemini-1.5-flash",
                    contents=prompt_final
                )
                
                texto_gerado = response.text
                
                # Exibir resultados
                st.success("‚úÖ Blog post gerado com sucesso!")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("üìä Metadados do Post")
                    st.info(f"**T√≠tulo:** {titulo_blog}")
                    st.info(f"**Cultura:** {cultura}")
                    st.info(f"**Editoria:** {editoria}")
                    st.info(f"**M√™s de Publica√ß√£o:** {mes_publicacao}")
                    st.info(f"**URL:** {url}")
                    
                    # Bot√£o para copiar texto
                    st.download_button(
                        label="üì• Download do Texto",
                        data=texto_gerado,
                        file_name=f"blog_post_{titulo_blog.lower().replace(' ', '_')}.txt",
                        mime="text/plain"
                    )
                
                with col2:
                    st.subheader("üåê Informa√ß√µes do Produto")
                    st.success(f"**Produto:** {nome_produto}")
                    st.success(f"**Princ√≠pio Ativo:** {principio_ativo}")
                    st.success(f"**Empresa:** {nome_empresa}")
                
                st.divider()
                
                st.subheader("üìù Conte√∫do Gerado")
                st.markdown(texto_gerado)
                
                # Salvar no MongoDB se conectado
                if mongo_connected:
                    if salvar_no_mongo(titulo_blog, cultura, editoria, mes_publicacao, objetivo_post, url, texto_gerado):
                        st.sidebar.success("‚úÖ Post salvo no banco de dados!")
                
            except Exception as e:
                st.error(f"Erro ao gerar o conte√∫do: {str(e)}")
    
    elif not gemini_api_key:
        st.warning("‚ö†Ô∏è Por favor, insira uma API Key v√°lida do Gemini para gerar conte√∫dos.")

else:
    st.info("üîë Para come√ßar, insira sua API Key do Gemini na barra lateral.")

# Rodap√©
st.divider()
st.caption("üå± Gerador de Conte√∫do Agr√≠cola - Desenvolvido para produtores e empresas do agroneg√≥cio")
