import streamlit as st
from google import genai
import os
import uuid
from datetime import datetime
from pymongo import MongoClient
import json

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Gerador de Blog Posts Agr√≠colas", page_icon="üå±", layout="wide")

# T√≠tulo do aplicativo
st.title("üå± Gerador de Blog Posts Agr√≠colas")
st.markdown("Crie conte√∫dos especializados para o agroneg√≥cio seguindo a estrutura profissional")

# Conex√£o com MongoDB
try:
    client_mongo = MongoClient("mongodb+srv://gustavoromao3345:RqWFPNOJQfInAW1N@cluster0.5iilj.mongodb.net/auto_doc?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE&tlsAllowInvalidCertificates=true")
    db = client_mongo['blog_posts_agricolas']
    collection_posts = db['posts_gerados']
    collection_briefings = db['briefings']
    collection_kbf = db['kbf_produtos']
    mongo_connected = True
except Exception as e:
    st.error(f"Erro na conex√£o com MongoDB: {str(e)}")
    mongo_connected = False

# Configura√ß√£o do Gemini API
gemini_api_key = st.secrets.get("GEMINI_API_KEY", os.getenv("GEMINI_API_KEY"))
if not gemini_api_key:
    gemini_api_key = st.text_input("Digite sua API Key do Gemini:", type="password")

if gemini_api_key:
    client = genai.Client(api_key=gemini_api_key)

    # Fun√ß√µes para o banco de dados
    def salvar_post(titulo, cultura, editoria, mes_publicacao, objetivo_post, url, texto_gerado, palavras_chave, metadescricao, palavras_proibidas, tom_voz, estrutura, palavras_contagem):
        if mongo_connected:
            documento = {
                "id": str(uuid.uuid4()),
                "titulo": titulo,
                "cultura": cultura,
                "editoria": editoria,
                "mes_publicacao": mes_publicacao,
                "objetivo_post": objetivo_post,
                "url": url,
                "texto_gerado": texto_gerado,
                "palavras_chave": palavras_chave,
                "metadescricao": metadescricao,
                "palavras_proibidas": palavras_proibidas,
                "tom_voz": tom_voz,
                "estrutura": estrutura,
                "palavras_contagem": palavras_contagem,
                "data_criacao": datetime.now(),
                "versao": "1.0"
            }
            collection_posts.insert_one(documento)
            return True
        return False

    def carregar_kbf_produtos():
        if mongo_connected:
            try:
                kbf_docs = list(collection_kbf.find({}))
                return kbf_docs
            except:
                return []
        return []

    def salvar_briefing(briefing_data):
        if mongo_connected:
            documento = {
                "id": str(uuid.uuid4()),
                "briefing": briefing_data,
                "data_criacao": datetime.now()
            }
            collection_briefings.insert_one(documento)
            return True
        return False

    def carregar_posts_anteriores():
        if mongo_connected:
            try:
                posts = list(collection_posts.find({}).sort("data_criacao", -1).limit(10))
                return posts
            except:
                return []
        return []

    # Regras base do sistema
    regras_base = '''
**REGRAS DE REPLICA√á√ÉO - ESTRUTURA PROFISSIONAL:**

**1. ESTRUTURA DO DOCUMENTO:**
- T√≠tulo principal impactante e com chamada para a√ß√£o
- Subt√≠tulo/Chap√©u com resumo executivo (1-2 linhas)
- Introdu√ß√£o contextualizando o problema e impacto
- Se√ß√£o de Problema: Detalhamento t√©cnico dos desafios
- Se√ß√£o de Solu√ß√£o Gen√©rica: Estrat√©gia geral de manejo
- Se√ß√£o de Solu√ß√£o Espec√≠fica: Produto como resposta aos desafios
- Conclus√£o com refor√ßo de compromisso e chamada para a√ß√£o
- Assinatura padr√£o da empresa

**2. LINGUAGEM E TOM:**
- {tom_voz}
- Linguagem {nivel_tecnico} t√©cnica e profissional
- Uso de terminologia espec√≠fica do agroneg√≥cio
- Persuas√£o baseada em benef√≠cios e solu√ß√£o de problemas
- Evitar repeti√ß√£o de informa√ß√µes entre se√ß√µes

**3. ELEMENTOS T√âCNICOS OBRIGAT√ìRIOS:**
- Nomes cient√≠ficos entre par√™nteses quando aplic√°vel
- Cita√ß√£o de fontes confi√°veis (Embrapa, universidades, etc.)
- Destaque para termos t√©cnicos-chave e nomes de produtos
- Descri√ß√£o detalhada de danos e benef√≠cios
- Dados concretos e informa√ß√µes mensur√°veis

**4. RESTRI√á√ïES:**
- Palavras proibidas: {palavras_proibidas}
- Evitar vi√©s comercial expl√≠cito
- Manter abordagem {abordagem_problema}
- N√∫mero de palavras: {numero_palavras} (¬±10%)
'''

    # Interface principal
    with st.sidebar:
        st.header("üìã Configura√ß√µes Principais")
        
        # Modo de entrada - Briefing ou Campos Individuais
        modo_entrada = st.radio("Modo de Entrada:", ["Campos Individuais", "Briefing Completo"])
        
        # Controle de palavras
        numero_palavras = st.slider("N√∫mero de Palavras:", min_value=300, max_value=3000, value=1000, step=100)
        
        # Palavras-chave
        st.subheader("üîë Palavras-chave")
        palavra_chave_principal = st.text_input("Palavra-chave Principal:")
        palavras_chave_secundarias = st.text_area("Palavras-chave Secund√°rias (separadas por v√≠rgula):")
        
        # Configura√ß√µes de estilo
        st.subheader("üé® Configura√ß√µes de Estilo")
        tom_voz = st.selectbox("Tom de Voz:", ["Jornal√≠stico", "Especialista T√©cnico", "Educativo", "Persuasivo"])
        nivel_tecnico = st.selectbox("N√≠vel T√©cnico:", ["B√°sico", "Intermedi√°rio", "Avan√ßado"])
        abordagem_problema = st.text_area("Aborde o problema de tal forma que:", "seja claro, t√©cnico e focando na solu√ß√£o pr√°tica para o produtor")
        
        # Restri√ß√µes
        st.subheader("üö´ Restri√ß√µes")
        palavras_proibidas = st.text_area("Palavras Proibidas (separadas por v√≠rgula):", "melhor, n√∫mero 1, l√≠der, insuper√°vel")
        
        # Estrutura do texto
        st.subheader("üìê Estrutura do Texto")
        estrutura_opcoes = st.multiselect("Se√ß√µes do Post:", 
                                         ["Introdu√ß√£o", "Problema", "Solu√ß√£o Gen√©rica", "Solu√ß√£o Espec√≠fica", 
                                          "Benef√≠cios", "Implementa√ß√£o Pr√°tica", "Conclus√£o", "Fontes"],
                                         default=["Introdu√ß√£o", "Problema", "Solu√ß√£o Gen√©rica", "Solu√ß√£o Espec√≠fica", "Conclus√£o"])
        
        # KBF de Produtos
        st.subheader("üì¶ KBF de Produtos")
        kbf_produtos = carregar_kbf_produtos()
        if kbf_produtos:
            produtos_disponiveis = [prod['nome'] for prod in kbf_produtos]
            produto_selecionado = st.selectbox("Selecionar Produto do KBF:", ["Nenhum"] + produtos_disponiveis)
            if produto_selecionado != "Nenhum":
                produto_info = next((prod for prod in kbf_produtos if prod['nome'] == produto_selecionado), None)
                if produto_info:
                    st.info(f"**KBF Fixo:** {produto_info.get('caracteristicas', 'Informa√ß√µes do produto')}")
        else:
            st.info("Nenhum KBF cadastrado no banco de dados")

    # √Årea principal baseada no modo de entrada
    if modo_entrada == "Campos Individuais":
        col1, col2 = st.columns(2)
        
        with col1:
            st.header("üìù Informa√ß√µes B√°sicas")
            titulo_blog = st.text_input("T√≠tulo do Blog:", "Proteja sua soja de nematoides e pragas de solo")
            metadescricao = st.text_area("Meta Descri√ß√£o:", max_chars=160)
            cultura = st.text_input("Cultura:", "Soja")
            editoria = st.text_input("Editoria:", "Manejo e Prote√ß√£o")
            mes_publicacao = st.text_input("M√™s de Publica√ß√£o:", "08/2025")
            objetivo_post = st.text_area("Objetivo do Post:", "Explicar a import√¢ncia do manejo de nematoides e apresentar solu√ß√µes via tratamento de sementes")
            url = st.text_input("URL:", "/manejo-e-protecao/proteja-sua-soja-de-nematoides")
            
            st.header("üîß Conte√∫do T√©cnico")
            problema_principal = st.text_area("Problema Principal/Contexto:", "Solos compactados e com palhada de milho t√™m favorecido a explos√£o populacional de nematoides")
            pragas_alvo = st.text_area("Pragas/Alvo Principal:", "Nematoide das galhas (Meloidogyne incognita), Nematoide de cisto (Heterodera glycines)")
            danos_causados = st.text_area("Danos Causados:", "Forma√ß√£o de galhas nas ra√≠zes que impedem a absor√ß√£o de √°gua e nutrientes")
            solucao_generica = st.text_area("Solu√ß√£o Gen√©rica:", "Ado√ß√£o de um manejo integrado com gen√©tica resistente, rota√ß√£o de culturas e tratamento de sementes")
        
        with col2:
            st.header("üè≠ Informa√ß√µes da Empresa")
            nome_empresa = st.text_input("Nome da Empresa/Marca:")
            nome_central = st.text_input("Nome da Central de Conte√∫dos:")
            
            st.header("üí° Solu√ß√µes e Produtos")
            nome_produto = st.text_input("Nome do Produto:")
            principio_ativo = st.text_input("Princ√≠pio Ativo/Diferencial:")
            beneficios_produto = st.text_area("Benef√≠cios do Produto:")
            espectro_acao = st.text_area("Espectro de A√ß√£o:")
            
            st.header("üéØ Diretrizes Espec√≠ficas")
            diretrizes_usuario = st.text_area("Diretrizes Adicionais:", "Incluir dicas pr√°ticas para implementa√ß√£o no campo. Manter linguagem acess√≠vel mas t√©cnica.")
            fontes_pesquisa = st.text_area("Fontes para Pesquisa/Refer√™ncia:", "Embrapa Soja, Universidade de S√£o Paulo, Artigos t√©cnicos sobre nematoides")
            
            # Upload de arquivos estrat√©gicos
            arquivo_strategico = st.file_uploader("üìé Upload de Arquivo Estrat√©gico", type=['txt', 'pdf', 'docx'])
            if arquivo_strategico:
                st.success(f"Arquivo {arquivo_strategico.name} carregado com sucesso!")
    
    else:  # Modo Briefing
        st.header("üìÑ Briefing Completo")
        briefing_texto = st.text_area("Cole aqui o briefing completo:", height=300,
                                     placeholder="""EXEMPLO DE BRIEFING:
T√≠tulo: Controle Eficiente de Nematoides na Soja
Cultura: Soja
Problema: Aumento da popula√ß√£o de nematoides em solos com palhada de milho
Objetivo: Educar produtores sobre manejo integrado
Produto: NemaControl
P√∫blico-alvo: Produtores de soja t√©cnica
Tom: T√©cnico-jornal√≠stico
Palavras-chave: nematoide, soja, tratamento sementes, manejo integrado""")
        
        if briefing_texto:
            if st.button("Processar Briefing"):
                salvar_briefing(briefing_texto)
                st.success("Briefing salvo no banco de dados!")

    # Configura√ß√µes avan√ßadas
    with st.expander("‚öôÔ∏è Configura√ß√µes Avan√ßadas"):
        col_av1, col_av2 = st.columns(2)
        
        with col_av1:
            st.subheader("Opcionais")
            usar_pesquisa_web = st.checkbox("üîç Habilitar Pesquisa Web", value=False)
            gerar_blocos_dinamicos = st.checkbox("üîÑ Gerar Blocos Dinamicamente", value=True)
            incluir_fontes = st.checkbox("üìö Incluir Refer√™ncias de Fontes", value=True)
            incluir_assinatura = st.checkbox("‚úçÔ∏è Incluir Assinatura Padr√£o", value=True)
            
        with col_av2:
            st.subheader("Controles de Qualidade")
            evitar_repeticao = st.slider("N√≠vel de Evitar Repeti√ß√£o:", 1, 10, 8)
            profundidade_conteudo = st.selectbox("Profundidade do Conte√∫do:", ["Superficial", "Moderado", "Detalhado", "Especializado"])
            
            # Transcri√ß√£o de √°udio/v√≠deo
            st.subheader("üé§ Transcri√ß√£o")
            arquivo_midia = st.file_uploader("√Åudio/Video para Transcri√ß√£o", type=['mp3', 'wav', 'mp4', 'mov'])

    # √Årea de gera√ß√£o e edi√ß√£o
    st.header("üîÑ Gera√ß√£o e Edi√ß√£o do Conte√∫do")
    
    col_gerar, col_editar = st.columns(2)
    
    with col_gerar:
        if st.button("üöÄ Gerar Blog Post", type="primary", use_container_width=True):
            if gemini_api_key:
                with st.spinner("Gerando conte√∫do... Isso pode levar alguns minutos"):
                    try:
                        # Construir prompt personalizado
                        regras_personalizadas = regras_base.format(
                            tom_voz=tom_voz,
                            nivel_tecnico=nivel_tecnico,
                            palavras_proibidas=palavras_proibidas,
                            abordagem_problema=abordagem_problema,
                            numero_palavras=numero_palavras
                        )
                        
                        prompt_final = f"""
                        **INSTRU√á√ïES PARA CRIA√á√ÉO DE BLOG POST AGR√çCOLA:**
                        
                        {regras_personalizadas}
                        
                        **INFORMA√á√ïES ESPEC√çFICAS:**
                        - T√≠tulo: {titulo_blog if 'titulo_blog' in locals() else 'A definir'}
                        - Meta Descri√ß√£o: {metadescricao}
                        - Cultura: {cultura if 'cultura' in locals() else 'A definir'}
                        - Palavra-chave Principal: {palavra_chave_principal}
                        - Palavras-chave Secund√°rias: {palavras_chave_secundarias}
                        
                        **ESTRUTURA SOLICITADA:** {', '.join(estrutura_opcoes)}
                        **N√çVEL DE PROFUNDIDADE:** {profundidade_conteudo}
                        **EVITAR REPETI√á√ÉO:** N√≠vel {evitar_repeticao}/10
                        
                        **DIRETRIZES ADICIONAIS:** {diretrizes_usuario if 'diretrizes_usuario' in locals() else 'Nenhuma'}
                        
                        Gere um conte√∫do {profundidade_conteudo.lower()} com aproximadamente {numero_palavras} palavras.
                        """
                        
                        response = client.models.generate_content(
                            model="gemini-1.5-flash",
                            contents=prompt_final
                        )
                        
                        texto_gerado = response.text
                        
                        # Salvar no MongoDB
                        if salvar_post(
                            titulo_blog if 'titulo_blog' in locals() else "T√≠tulo gerado",
                            cultura if 'cultura' in locals() else "Cultura n√£o especificada",
                            editoria if 'editoria' in locals() else "Editoria geral",
                            mes_publicacao if 'mes_publicacao' in locals() else datetime.now().strftime("%m/%Y"),
                            objetivo_post if 'objetivo_post' in locals() else "Objetivo n√£o especificado",
                            url if 'url' in locals() else "/",
                            texto_gerado,
                            f"{palavra_chave_principal}, {palavras_chave_secundarias}",
                            metadescricao,
                            palavras_proibidas,
                            tom_voz,
                            ', '.join(estrutura_opcoes),
                            numero_palavras
                        ):
                            st.success("‚úÖ Post gerado e salvo no banco de dados!")
                        
                        st.session_state.texto_gerado = texto_gerado
                        st.session_state.mostrar_editor = True
                        
                    except Exception as e:
                        st.error(f"Erro na gera√ß√£o: {str(e)}")
    
    with col_editar:
        if st.button("üìä Banco de Textos", use_container_width=True):
            st.session_state.mostrar_banco = True

    # Editor de texto p√≥s-gera√ß√£o
    if st.session_state.get('mostrar_editor', False) and 'texto_gerado' in st.session_state:
        st.header("‚úèÔ∏è Editor de Texto")
        
        texto_editavel = st.text_area("Edite o texto gerado:", 
                                     value=st.session_state.texto_gerado, 
                                     height=400)
        
        col_salvar, col_download, col_nova_versao = st.columns(3)
        
        with col_salvar:
            if st.button("üíæ Salvar Edi√ß√µes"):
                # Atualizar no banco de dados
                st.success("Edi√ß√µes salvas!")
                
        with col_download:
            st.download_button(
                label="üì• Download",
                data=texto_editavel,
                file_name=f"blog_post_{titulo_blog.lower().replace(' ', '_')}.txt",
                mime="text/plain"
            )
            
        with col_nova_versao:
            if st.button("üîÑ Gerar Nova Vers√£o"):
                st.session_state.mostrar_editor = False

    # Banco de textos gerados
    if st.session_state.get('mostrar_banco', False):
        st.header("üìö Banco de Textos Gerados")
        
        posts_anteriores = carregar_posts_anteriores()
        if posts_anteriores:
            for post in posts_anteriores:
                with st.expander(f"{post.get('titulo', 'Sem t√≠tulo')} - {post.get('data_criacao', '').strftime('%d/%m/%Y')}"):
                    st.write(f"**Cultura:** {post.get('cultura', 'N/A')}")
                    st.write(f"**Palavras:** {post.get('palavras_contagem', 'N/A')}")
                    st.write(f"**Tom:** {post.get('tom_voz', 'N/A')}")
                    st.text_area("Conte√∫do:", value=post.get('texto_gerado', ''), height=200, key=post['id'])
                    
                    col_uso1, col_uso2 = st.columns(2)
                    with col_uso1:
                        if st.button("Reutilizar", key=f"reuse_{post['id']}"):
                            st.session_state.texto_gerado = post.get('texto_gerado', '')
                            st.session_state.mostrar_editor = True
                    with col_uso2:
                        if st.button("Download", key=f"dl_{post['id']}"):
                            st.download_button(
                                label="üì• Download",
                                data=post.get('texto_gerado', ''),
                                file_name=f"blog_post_{post.get('titulo', 'post').lower().replace(' ', '_')}.txt",
                                mime="text/plain",
                                key=f"dl_btn_{post['id']}"
                            )
        else:
            st.info("Nenhum post encontrado no banco de dados.")

else:
    st.info("üîë Para come√ßar, insira sua API Key do Gemini.")

# Rodap√©
st.divider()
st.caption("üå± Gerador de Conte√∫do Agr√≠cola - Sistema profissional para cria√ß√£o de conte√∫dos t√©cnicos")

# Instru√ß√µes de uso
with st.expander("‚ÑπÔ∏è Instru√ß√µes de Uso"):
    st.markdown("""
    **Como usar este gerador:**
    
    1. **Configura√ß√µes B√°sicas:** Defina palavras-chave, tom de voz e estrutura
    2. **Modo de Entrada:** Escolha entre campos individuais ou briefing completo
    3. **Restri√ß√µes:** Configure palavras proibidas e diretrizes espec√≠ficas
    4. **Gera√ß√£o:** Clique em "Gerar Blog Post" para criar o conte√∫do
    5. **Edi√ß√£o:** Use o editor integrado para ajustes finos
    6. **Banco de Dados:** Acesse textos anteriores para reutiliza√ß√£o
    
    **Recursos Avan√ßados:**
    - KBF de produtos fixos do banco de dados
    - Controle preciso de n√∫mero de palavras
    - Evitar repeti√ß√£o de conte√∫do
    - Suporte a pesquisa web e arquivos estrat√©gicos
    - Transcri√ß√£o de √°udio/v√≠deo
    """)
